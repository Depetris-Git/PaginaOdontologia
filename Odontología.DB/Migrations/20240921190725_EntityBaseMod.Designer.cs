// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Odontología.DB.Data;

#nullable disable

namespace Odontología.DB.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240921190725_EntityBaseMod")]
    partial class EntityBaseMod
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Odontología.DB.Data.Entity.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("NumeroTelefonoSecundario")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DNI" }, "DNI_UQ")
                        .IsUnique();

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Odontología.DB.Data.Entity.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PresupuestoId")
                        .HasColumnType("int");

                    b.Property<int>("TratamientoOdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PresupuestoId");

                    b.HasIndex("TratamientoOdId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Odontología.DB.Data.Entity.Presupuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("CodigoPres")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal?>("CostoAbonado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoIncial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoPorPagar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<bool>("Pagado")
                        .HasColumnType("bit");

                    b.Property<int?>("PagoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PagoId");

                    b.HasIndex(new[] { "CodigoPres" }, "CodigoPres_UQ")
                        .IsUnique();

                    b.ToTable("Presupuestos");
                });

            modelBuilder.Entity("Odontología.DB.Data.Entity.TipoTratamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "TipoTrat_Nombre_UQ")
                        .IsUnique();

                    b.ToTable("TipoTratamientos");
                });

            modelBuilder.Entity("Odontología.DB.Data.Entity.TratamientoOd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<decimal>("CostoAcordado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CostoProtesista")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaOperacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int?>("PresupuestoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoTratamientoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PresupuestoId");

                    b.HasIndex("TipoTratamientoId");

                    b.ToTable("TratamientosOd");
                });

            modelBuilder.Entity("Odontología.DB.Data.Entity.Pago", b =>
                {
                    b.HasOne("Odontología.DB.Data.Entity.Presupuesto", null)
                        .WithMany("Pagos")
                        .HasForeignKey("PresupuestoId");

                    b.HasOne("Odontología.DB.Data.Entity.TratamientoOd", "TratamientoOd")
                        .WithMany()
                        .HasForeignKey("TratamientoOdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TratamientoOd");
                });

            modelBuilder.Entity("Odontología.DB.Data.Entity.Presupuesto", b =>
                {
                    b.HasOne("Odontología.DB.Data.Entity.Paciente", "Paciente")
                        .WithMany("Historial_Presupuestos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Odontología.DB.Data.Entity.Pago", "UltimoPago")
                        .WithMany()
                        .HasForeignKey("PagoId");

                    b.Navigation("Paciente");

                    b.Navigation("UltimoPago");
                });

            modelBuilder.Entity("Odontología.DB.Data.Entity.TratamientoOd", b =>
                {
                    b.HasOne("Odontología.DB.Data.Entity.Paciente", "Paciente")
                        .WithMany("Historial_TratamientosOd")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Odontología.DB.Data.Entity.Presupuesto", "Presupuesto")
                        .WithMany()
                        .HasForeignKey("PresupuestoId");

                    b.HasOne("Odontología.DB.Data.Entity.TipoTratamiento", "TipoTratamiento")
                        .WithMany()
                        .HasForeignKey("TipoTratamientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Presupuesto");

                    b.Navigation("TipoTratamiento");
                });

            modelBuilder.Entity("Odontología.DB.Data.Entity.Paciente", b =>
                {
                    b.Navigation("Historial_Presupuestos");

                    b.Navigation("Historial_TratamientosOd");
                });

            modelBuilder.Entity("Odontología.DB.Data.Entity.Presupuesto", b =>
                {
                    b.Navigation("Pagos");
                });
#pragma warning restore 612, 618
        }
    }
}
